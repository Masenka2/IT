discovered_devices = discover_devices() //поиск устройств
10:51:58	
target_device = "Raj" 
target_device_address = None 

for address in discovered_devices: 
if target_device==lookup_name(address): 
target_device_address=address 
break
преобразование в нормальное имя
if target_device_address is not None: 
print "Адрес целевого устройства :", 
target_device_address 
else: 
print "Не могу найти адрес целевого устройства"
Код перебирает список адресов и передает один адрес в lookup_name способ. 
Затем он сравнивает возвращенное имя с имя нужного устройства. если они совпадают, то сообщение печатается и метод прерывает цикл.


Что завершает основные шаги, необходимые для подключения к любому устройству. 
Как только открытие сделано, то на основе типа услуги, связь может начаться. Теперь, когда шаги очевидны, давайте рассмотрим реальный 
пример, который использует шаги, только полная получить доступ к устройству Bluetooth.
from bluetooth import *
Далее идет класс с конструктором. Конструктор принимает имя устройства, адрес которого должен быть найден.
class Devices:
   def __init__( self, target_device_name):
      self.target_device=target_device_name
      self.target_device_address= None
      Далее определим метод, который будет выполнять поиск метода. 
      Если целевое устройство не найдено, это будет адрес переменной самостоятельно.target_device_address. 
      Найти адрес, он перебирает список адресов, возвращаемых discover_devices() метод и передает каждое обращение к lookup_name способ.
      def check_devices(self):
      discovered_devices=discover_devices()
      for address in discovered_devices:
        if self.target_device==lookup_name(address):
        self.target_device_address=address
        break
        Далее идет метод, который проверяет, соответствует ли адрес целевого устройства или нет. 
        Если найден, он будет возвращать адрес; в противном случае он вернет None.
         def device_found(self):
      self.check_devices()

       if self.target_device_address is not None:
        return self.target_device_address
      else:
        return None
       Это завершает наш класс. Теперь давайте проверить его, позвонив с другого модуля. 
       Модуль сначала попросить пользователя ввести имя устройства, которое будет обнаружено. 
       Тогда он будет создавать объект класса устройств и вызова метода check_device. 
       Возвращаемый результат будет отображаться для пользователя. Вот код:
       user_device= raw_input("Enter the device to be
discovered:")
device = Devices(user_device)
addr = device.device_found()

if addr is not None:
      print "адрес ус :". Adder
else:
      print "не могу найти адрес"
      Это завершатройствает наше обсуждение Основы программирования Bluetooth с помощью питона. 
      Следующий шаг-создайте и откройте для себя услуги. Это будет темой моего следующего обсуждения. До сих пор....
